import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;

${config.fileHeader}
@Service
public class ${table.beanName}QueryFacadeImpl implements ${table.beanName}QueryFacade {
	private static final Logger logger = LoggerFactory.getLogger(${table.beanName}QueryFacadeImpl.class);

	@Autowired
	private ${table.beanName}Service ${table.injectName}Service;

    @Override
    public Result<${table.beanName}> findById(Long id) {
       try {
			Assert.notNull(id, "编号不能为空");
			return Result.buildSucc(${table.injectName}Service.findById(id));
		} catch (Exception ex) {
			logger.warn("根据编号查询记录异常", ex);
			return Result.buildFail(null, ex.getMessage());
		}
    }

    @Override
    public Result<List<${table.beanName}>> query(${table.beanName}Query query){
       try {
			Assert.notNull(query, "查询参数不能为空");
			return Result.buildSucc(${table.injectName}Service.query(query));
		} catch (Exception ex) {
			logger.warn("根据参数查询记录列表异常", ex);
			return Result.buildFail(null, ex.getMessage());
		}
    }

    @Override
    public Result<Integer> count(${table.beanName}Query query) {
         try {
			Assert.notNull(query, "统计参数不能为空");
			return Result.buildSucc(${table.injectName}Service.count(query));
		} catch (Exception ex) {
			logger.warn("根据统计参数查询记录异常", ex);
			return Result.buildFail(null, ex.getMessage());
		}
    }
}